0 info it worked if it ends with ok
1 verbose cli [ 'node', '/usr/local/bin/npm', 'publish' ]
2 info using npm@2.1.18
3 info using node@v0.10.22
4 verbose publish [ '.' ]
5 silly cache add args [ '.', null ]
6 verbose cache add spec .
7 silly cache add parsed spec { raw: '.',
7 silly cache add   scope: null,
7 silly cache add   name: null,
7 silly cache add   rawSpec: '.',
7 silly cache add   spec: '/Users/treverfaden/RebelMailCode/localCollection',
7 silly cache add   type: 'directory' }
8 verbose addLocalDirectory /Users/treverfaden/.npm/localCollection/0.0.1/package.tgz not in flight; packing
9 verbose tar pack [ '/Users/treverfaden/.npm/localCollection/0.0.1/package.tgz',
9 verbose tar pack   '/Users/treverfaden/RebelMailCode/localCollection' ]
10 verbose tarball /Users/treverfaden/.npm/localCollection/0.0.1/package.tgz
11 verbose folder /Users/treverfaden/RebelMailCode/localCollection
12 info prepublish localCollection@0.0.1
13 verbose addLocalTarball adding from inside cache /Users/treverfaden/.npm/localCollection/0.0.1/package.tgz
14 silly cache afterAdd localCollection@0.0.1
15 verbose afterAdd /Users/treverfaden/.npm/localCollection/0.0.1/package/package.json not in flight; writing
16 verbose afterAdd /Users/treverfaden/.npm/localCollection/0.0.1/package/package.json written
17 silly publish { name: 'localCollection',
17 silly publish   version: '0.0.1',
17 silly publish   description: 'MongoDB Query Style Array Filtering and Modifying',
17 silly publish   main: 'index.js',
17 silly publish   dependencies: { sift: '^0.2.3' },
17 silly publish   devDependencies: {},
17 silly publish   scripts: { test: 'node node.js' },
17 silly publish   repository: { type: 'git', url: 'https://github.com/trever/sift.js.git' },
17 silly publish   keywords:
17 silly publish    [ 'mongo',
17 silly publish      'mongodb',
17 silly publish      'array',
17 silly publish      'query',
17 silly publish      'find',
17 silly publish      'findOne',
17 silly publish      'findAndModify',
17 silly publish      'rebelmail',
17 silly publish      'trever' ],
17 silly publish   author: { name: 'Trever Faden', url: '@trever' },
17 silly publish   license: 'ISC',
17 silly publish   bugs: { url: 'https://github.com/trever/sift.js/issues' },
17 silly publish   homepage: 'https://github.com/trever/sift.js',
17 silly publish   readme: '## MongoDB inspired array filtering [![Build Status](https://secure.travis-ci.org/crcn/sift.js.png)](https://secure.travis-ci.org/crcn/sift.js)\n\nFor extended documentation, checkout http://docs.mongodb.org/manual/reference/operator/query/\n\n## Features:\n\n- Supported operators: [$in](#in), [$nin](#nin), [$exists](#exists), [$gte](#gte), [$gt](#gt), [$lte](#lte), [$lt](#lt), [$eq](#eq), [$neq](#neq), [$mod](#mod), [$all](#all), [$and](#and), [$or](#or), [$nor](#nor), [$not](#not), [$size](#size), [$type](#type), [$regex](#regex)\n- Regexp searches\n- Function filtering\n- sub object searching\n- dot notation searching\n- Supports node.js, and web\n- Small (2 kb minified) library\n- Custom Expressions \n\n\n\n## Node.js Examples\n\n```javascript\n\nvar localCollection = require(\'sift\');\n\nvar someArray = [{id: 1}, {id:2}, {id:3}];\n\nvar SomeArray = new localCollection(someArray);\n\n// Find\nSomeArray.find({id:2});\n// [ {id:2} ]\n\n// FindOne\nSomeArray.findOne({id:2});\n// {id:2}\n\n// Remove\nSomeArray.remove({id:2});\n// [ {id:1}, {id:3} ]\n\n// Count\nSomeArray.find({id:3}).count()\n// 1\n\n// Update\nSomeArray.update({id:3}, function(ob){ob.magic = true});\n// [ {id:1}, {id:3, magic:true} ]\n\n// Insert\nSomeArray.insert({yoman: \'guild\'});\n// [ {id:1}, {id:3, magic:true}, {yoman: \'guild\'} ]\n\n// FindAndModify\nSomeArray.findAndModify({yoman:\'guild\'}, function(ob){ob.happiness = true});\n// [ {yoman:\'guild\', happiness:true} ]\n\n\n## Supported Operators:\n\nSee MongoDB\'s [advanced queries](http://www.mongodb.org/display/DOCS/Advanced+Queries) for more info.\n\n### $in\n\narray value must be *$in* the given query:\n\nIntersecting two arrays:\n \n```javascript\n//filtered: [\'Brazil\']\nSomeArray.find({ $in: [\'Costa Rica\',\'Brazil\'] }); \n``` \n\nHere\'s another example. This acts more like the $or operator:\n\n```javascript\nSomeArray.find({ location: { $in: [\'Costa Rica\',\'Brazil\'] } });\n```\n\n### $nin\n\nOpposite of $in:\n\n```javascript\n//filtered: [\'Haiti\',\'Peru\',\'Chile\']\nSomeArray.find({ $nin: [\'Costa Rica\',\'Brazil\'] }); \n``` \n\n### $exists\n\nChecks if whether a value exists:\n\n```javascript\n//filtered: [\'Craig\',\'Tim\']\nsift({ $exists: true }, [\'Craig\',null,\'Tim\']); \n``` \n\nYou can also filter out values that don\'t exist\n\n```javascript\n//filtered: [{ name: \'Craig\', city: \'Minneapolis\' }]\nsift({ city: { $exists: false } }, [ { name: \'Craig\', city: \'Minneapolis\' }, { name: \'Tim\' }]); \n```\n\n### $gte\n\nChecks if a number is >= value:\n\n```javascript\n//filtered: [2, 3]\nsift({ $gte: 2 }, [0, 1, 2, 3]); \n```\n\n### $gt\n\nChecks if a number is > value:\n\n```javascript\n//filtered: [3]\nsift({ $gt: 2 }, [0, 1, 2, 3]); \n```\n\n### $lte\n\nChecks if a number is <= value.\n\n```javascript\n//filtered: [0, 1, 2]\nsift({ $lte: 2 }, [0, 1, 2, 3]); \n```\n\n### $lt\n\nChecks if number is < value.\n\n```javascript\n//filtered: [0, 1]\nsift({ $lt: 2 }, [0, 1, 2, 3]); \n```\n\n### $eq\n\nChecks if query == value. Note that **$eq can be omitted**. For **$eq**, and **$neq**\n\n```javascript\n//filtered: [{ state: \'MN\' }]\nsift({ state: {$eq: \'MN\' }}, [{ state: \'MN\' }, { state: \'CA\' }, { state: \'WI\' }); \n```\n\nOr:\n\n```javascript\n//filtered: [{ state: \'MN\' }]\nsift({ state: \'MN\' }, [{ state: \'MN\' }, { state: \'CA\' }, { state: \'WI\' }); \n```\n\n### $ne\n\nChecks if query != value.\n\n```javascript\n//filtered: [{ state: \'CA\' }, { state: \'WI\'}] \nsift({ state: {$ne: \'MN\' }}, [{ state: \'MN\' }, { state: \'CA\' }, { state: \'WI\' }); \n```\n\n### $mod\n\nModulus:\n\n```javascript\n//filtered: [300, 600]\nsift({ $mod: [3, 0] }, [100, 200, 300, 400, 500, 600]); \n```\n\n### $all\n\nvalues must match **everything** in array:\n\n```javascript\n//filtered: [ { tags: [\'books\',\'programming\',\'travel\' ]} ]\nsift({ tags: {$all: [\'books\',\'programming\'] }}, [\n{ tags: [\'books\',\'programming\',\'travel\' ] }, \n{ tags: [\'travel\',\'cooking\'] } ]); \n```\n\n### $and\n\nability to use an array of expressions. All expressions must test true.\n\n```javascript\n//filtered: [ { name: \'Craig\', state: \'MN\' }]\n\nsift({ $and: [ { name: \'Craig\' }, { state: \'MN\' } ] }, [ \n{ name: \'Craig\', state: \'MN\' }, \n{ name: \'Tim\', state: \'MN\' }, \n{ name: \'Joe\', state: \'CA\' } ]); \n```\n\n### $or\n\nOR array of expressions.\n\n```javascript\n//filtered: [ { name: \'Craig\', state: \'MN\' }, { name: \'Tim\', state: \'MN\' }]\nsift({ $or: [ { name: \'Craig\' }, { state: \'MN\' } ] }, [ \n{ name: \'Craig\', state: \'MN\' }, \n{ name: \'Tim\', state: \'MN\' }, \n{ name: \'Joe\', state: \'CA\' } ]); \n```\n\n### $nor\n\nopposite of or:\n\n```javascript\n//filtered: [ { name: \'Tim\', state: \'MN\' }, { name: \'Joe\', state: \'CA\' }]\nsift({ $nor: [ { name: \'Craig\' }, { state: \'MN\' } ] }, [ \n{ name: \'Craig\', state: \'MN\' }, \n{ name: \'Tim\', state: \'MN\' }, \n{ name: \'Joe\', state: \'CA\' } ]); \n```\n\n\n### $size\n\nMatches an array - must match given size:\n\n```javascript\n//filtered: [\'food\',\'cooking\']\nsift({ tags: { $size: 2 } }, [ { tags: [\'food\',\'cooking\'] }, { tags: [\'traveling\'] }]); \n```\n\n### $type\n\nMatches a values based on the type\n\n```javascript\nsift({ $type: Date }, [new Date(), 4342, \'hello world\']); //returns single date\nsift({ $type: String }, [new Date(), 4342, \'hello world\']); //returns [\'hello world\']\n```\n\n### $regex\n\nMatches values based on the given regular expression\n\n```javascript\nsift({ $regex: /^f/i, $nin: ["frank"] }, ["frank", "fred", "sam", "frost"]); // ["fred", "frost"]\n```\n\n### $not\n\nNot expression:\n\n```javascript\nsift({$not:{$in:[\'craig\',\'tim\']}}, [\'craig\',\'tim\',\'jake\']); //[\'jake\']\nsift({$not:{$size:5}}, [\'craig\',\'tim\',\'jake\']); //[\'tim\',\'jake\']\n```\n\n## sub object Searching\n\n\n```javascript\nvar people = [{\n\tname: \'craig\',\n\taddress: {\n\t\tcity: \'Minneapolis\'\n\t}\n},\n{\n\tname: \'tim\',\n\taddress: {\n\t\tcity: \'St. Paul\'\n\t}\n}];\n\nvar sifted = sift({ address: { city: \'Minneapolis\' }}, people); // count = 1\n\n//or\nvar sifted = sift({\'address.city\': \'minneapolis\'}, people);//count = 1\n```\n\n\n## Custom Expressions\n\nYou can add your own expressions. For instance - say you want to do some bitmask filtering, you could add this example:\n\n```javascript\n\nsift.use({\n\toperators: {\n\t\tband: function(a, b) {\n\t\t\treturn (a & b) ? 0 : -1; // 0 = exists, -1 = doesn\'t exist\n\t\t}\n\t}\n})\n\n// ops\nvar IS_ANIMAL = 2,\nIS_PERSON     = IS_ANIMAL   << 1,\nIS_DOG        = IS_PERSON   << 1,\nEATS_CEREAL   = IS_DOG      << 1,\nEATS_BONES    = EATS_CEREAL << 1;\n\nsift({ $band: IS_PERSON }, [ S_PERSON|EATS_CEREAL, IS_DOG|EATS_BONES, IS_PERSON ]);\n```\n',
17 silly publish   readmeFilename: 'README.md',
17 silly publish   gitHead: '70ff3b30df50e9689ed24ab7d112822fec4e4113',
17 silly publish   _id: 'localCollection@0.0.1',
17 silly publish   _shasum: 'bfa37d6ccf43e61a37f0df2c1c74668a17c5df13',
17 silly publish   _from: '.' }
18 silly mapToRegistry name localCollection
19 silly mapToRegistry using default registry
20 silly mapToRegistry registry https://registry.npmjs.org/
21 silly mapToRegistry uri https://registry.npmjs.org/localCollection
22 verbose publish registryBase https://registry.npmjs.org/
23 silly publish uploading /Users/treverfaden/.npm/localCollection/0.0.1/package.tgz
24 verbose stack Error: Invalid name: "localCollection"
24 verbose stack     at ensureValidName (/usr/local/lib/node_modules/npm/node_modules/normalize-package-data/lib/fixer.js:322:15)
24 verbose stack     at Object.module.exports.fixNameField (/usr/local/lib/node_modules/npm/node_modules/normalize-package-data/lib/fixer.js:211:5)
24 verbose stack     at CachingRegistryClient.publish (/usr/local/lib/node_modules/npm/node_modules/npm-registry-client/lib/publish.js:35:11)
24 verbose stack     at /usr/local/lib/node_modules/npm/lib/publish.js:124:14
24 verbose stack     at mapToRegistry (/usr/local/lib/node_modules/npm/lib/utils/map-to-registry.js:55:3)
24 verbose stack     at publish_ (/usr/local/lib/node_modules/npm/lib/publish.js:104:3)
24 verbose stack     at Array.1 (/usr/local/lib/node_modules/npm/node_modules/slide/lib/bind-actor.js:15:8)
24 verbose stack     at LOOP (/usr/local/lib/node_modules/npm/node_modules/slide/lib/chain.js:15:14)
24 verbose stack     at LOOP (/usr/local/lib/node_modules/npm/node_modules/slide/lib/chain.js:14:28)
24 verbose stack     at chain (/usr/local/lib/node_modules/npm/node_modules/slide/lib/chain.js:20:5)
25 verbose cwd /Users/treverfaden/RebelMailCode/localCollection
26 error Darwin 14.0.0
27 error argv "node" "/usr/local/bin/npm" "publish"
28 error node v0.10.22
29 error npm  v2.1.18
30 error Invalid name: "localCollection"
31 error If you need help, you may report this error at:
31 error     <http://github.com/npm/npm/issues>
32 verbose exit [ 1, true ]
